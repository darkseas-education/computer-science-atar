Unit 3 - ProgrammingProgramming skills and concepts - Knowledge*  program control structures, including:**  sequence**  selection**  iteration***  post-test***  pre-test*  characteristics of data types used in solutions, including:**  integer**  float**  string**  Boolean*  modular coding using functions, parameters and arguments*  scope of variables (Global, Local)*  characteristics of the following data structures:**  arrays***  one-dimensional arrays***  two-dimensional arrays**  dictionariesProgramming skills and concepts - Skills*  apply, using pseudocode and a programming language, program control structures in solutions*  apply, using pseudocode and a programming language, data types used in solutions as variables*  apply, using pseudocode and a programming language, modular coding using functions, parameters and arguments*  use different types of operators**  arithmetic operators (+, -, *, /, %)**  relational operators (==, !=, >, =, <=)**  logical operators (AND, OR, NOT)*  reading and writing of complex logical expressions, including:**  Boolean operators (AND, OR, NOT)**  logical order of precedence*  apply, using pseudocode and a programming language, the following data structures:**  arrays***  one-dimensional arrays***  two-dimensional arrays**  dictionariesGood programming practice - Knowledge*  Framework for development**  investigate***  problem description***  define requirements***  development schedule (including Gantt charts)**  design***  design data structures***  design and test algorithm**  develop***  develop and debug code***  unit testing and use of live data**  evaluate***  user acceptance testing***  developer retrospective*  compare common development processes**  linear**  iterative*  good programming practice, including:**  validate input before processing**  a clear and uncluttered mainline**  one logical task per subroutine**  use of stubs**  appropriate use of control structures and data structures**  writing for subsequent maintenance**  version control**  regular backup**  recognition of relevant social and ethical issues**  exception handling**  functions are able to return a single data structure or valueGood programming practice - Skills*  apply common development processes*  apply good programming practice when developing a software solution, including:**  validate input before processing**  a clear and uncluttered mainline**  one logical task per subroutine**  use of stubs**  appropriate use of control structures and data structures**  writing for subsequent maintenance**  version control**  regular backup**  recognition of relevant social and ethical issues**  exception handling**  functions return a single data structure or valueStructured algorithms - Knowledge*  effective structure of code**  use of a modular approach, including functions and classes**  use of stubs to represent incomplete modules**  parameter passing*  common algorithms**  Big O notation**  search algorithms***  linear search***  binary search**  sort algorithms***  bubble sort***  insertion sort***  selection sortStructured algorithms - Skills*  use pseudocode and/or programming language for representing algorithms*  create code with effective structure**  use of a modular approach, including functions and classes**  parameter passing**  use of stubs to represent incomplete functionsTesting - Knowledge*  acceptance testing of functional requirements based on user needs*  the use of live test data to ensure that testing accurately reflects the expected environment in which the new system will operate**  large file sizes**  mix of transaction types**  response times**  volume of data (load testing)*  validation of the solution with the design specifications*  generating relevant test data for complex solutions*  comparison of actual with expected output*  unit tests to ensure code performs correctlyTesting - Skills*  comparison of the solution with the design specifications*  generating relevant test data for complex solutions*  comparison of actual with expected outputError detection and debugging code - Knowledge*  the process of detecting and correcting errors, including:**  types of error***  syntax errors***  logic errors***  runtime errors, including:**** arithmetic overflow**** division by zero**** index out of range**  methods of error detection and correction***  methodical approach to the isolation of logic errors***  use of debugging techniques: -	breakpoints -	print statements***  desk checking (trace tables)***  comparison of actual with expected outputError detection and debugging code - Skills*  detecting and correcting errors, including:**  types of error***  syntax errors***  logic errors***  runtime errors, including:**** arithmetic overflow**** division by zero**** index out of range**  methodical approach to the isolation of errors***  use of debugging techniques***  desk checking (trace tables)***  comparison of actual with expected outputObject-oriented programming - Knowledge*  characteristics of the following object-oriented concepts:**  classes**  objects**  attributes**  methods**  abstraction and polymorphism**  instantiation**  inheritance**  encapsulationObject-oriented programming - Skills*  apply, using pseudocode and programming language, object-oriented programming concepts, including:**  classes**  objects**  attributes**  methods/operations**  abstraction**  instantiation**  inheritance*  use an object-oriented programming language to:**  create classes and objects with attributes and methods**  instantiate objects**  use inheritance to extend classes**  use variables and control structures within objectsEthical and legal implications for developers of software - Knowledge*  impacts of software in society, including:**  computer malware, such as viruses**  reliance on software**  social networking**  cyber safety**  large volumes of information (which may be unsupported, unverifiable, misleading or incorrect) available through the internet*  rights and responsibilities of software developers**  acknowledging the intellectual property of others**  recognition by others of the developerÕs intellectual property**  producing quality software solutions**  appropriately responding to user-identified problems**  adhering to code of conduct**  neither generating nor transmitting malware**  addressing ergonomic issues in software design**  ensuring software addresses inclusivity issues**  ensuring individualsÕ privacy is not compromised*  concepts associated with piracy and copyright law in relation to software development in AustraliaUnit 3 - Network communicationsModels of networking - Knowledge*  comparison between the Open Systems Interconnection (OSI) Model and the Department of Defence (DoD) transmission control protocol/internet protocol (TCP/IP) model*  OSI model:**  purpose of OSI model**  layers of OSI model**  role of layers within the model**  MAC address layer 2 switching**  IP address layer 3 routing*  DoD TCP/IP model:**  purpose of DoD model**  layers of DoD model***  application***  transport***  internet***  network**  role of layers within the model*  key protocols and devices associated with layers in models**  user datagram protocol (UDP)**  difference between UDP and TCP**  compare packet architecture between TCP and UDP*  features of TCP/IP**  IPv4 vs IPv6**  IP Addressing**  Private vs public IP addressing**  subnet masks**  subnetting**  default gateways**  domain name system (DNS)**  ports**  packet architecture***  data***  segment***  packet***  frame***  bitsModels of networking - Skills*  identify, design and apply IP addressing scheme*  identify, design and apply subnet masksNetwork components - Knowledge*  role of components at different network layers**  transmission media**  router**  gateway**  switch**  wireless access point**  firewallsNetwork performance - Knowledge*  network design topology for security and performance*  bandwidth**  mapping networks using diagrams including intermediary and end devices**  subnetting and collision domains (segmentation)*  tools for network performance management and troubleshooting**  ping**  tracerouteNetwork performance - Skills*  use ping and traceroute to troubleshoot and evaluate network performance*  interpret and create network diagrams using specified CISCO conventions to represent network topologies, considering addressing, subnets, segmentation, security and performanceUnit 4 - Cyber securityEthics and Law - Knowledge*  the Privacy Act 1988 as it relates to data security Australian Privacy Principle 11 (APP11)*  the Privacy Amendment (Notifiable Data Breaches) Act 2017 Ethics and Law - Skills*  apply theoretical ethics and law knowledge using supplied case studiesNetwork threats - Knowledge*  external network threats**  social engineering (phishing)**  denial of service, including distributed denial of service**  back door**  IP spoofing**  SQL Injection**  man-in-the-middle**  cross-site scripting**  types of malware**  physical network threats**  zero day vulnerabilities*  internal network threats**  lost or stolen devices**  compromised credentials**  misuse by employees*  security solutions to network threats**  analysis of log files**  anti-malware**  firewall filtering**  access control lists**  intrusion prevention systems**  virtual private networks**  user training**  ICT code of conduct**  physical security*  appropriate solutions to different external network threatsNetwork threats - Skills*  identify network security threats and suggest solutions for a given stimulus (mitigation strategies)Cryptography - Knowledge*  symmetric encryption*  asymmetric encryption (public/private keys)**  certificate purpose and use*  use of asymmetric encryption to:**  prevent unauthorised access to data**  authenticate data being sent across network*  secure communication over the internet**  use of asymmetric encryption to establish connection and symmetric encryption to exchange data*  common methods of encryption:**  early methods and weaknesses**  current best practiceEthical Hacking - Knowledge*  role of ethical hacking in improving network security*  penetration testing: role of blue team vs red teamUnit 4 -Data ManagementCore concepts - Knowledge*  organisation of a relational database:**  entities**  attributes**  relationships***  one-to-one***  one-to-many***  many-to-many**  tables as the implementation of entities, consisting of fields and records**  data types***  integer***  float***  Boolean***  text***  date*  primary and foreign keys to link tables*  composite key*  data anomalies**  insert**  update**  delete*  how databases interact with other systems and link to the programming content**  open database connectivity*  role of ACID in database transactions Ð atomicity, consistency, isolation, durabilityData modelling - Knowledge*  purpose of database documentation for the developers**  data dictionary**  entity relationship (ER) diagrams using crowÕs foot notationData modelling - Skills*  analyse ER diagrams written in crowÕs foot notation (three to 10 tables)*  create accurate ER diagrams using crowÕs foot notation (three to eight tables)*  represent databases using relational notation*  create data dictionaries*  resolve many to many (M:N) relationshipsData integrity - Knowledge*  data integrity**  referential integrity**  domain integrity**  entity integrity*  factors influencing quality of data, including:**  currency**  authenticity**  relevance**  accuracy**  outliers (cleaning)Normalisation - Knowledge*  purpose of normalising data to third normal form (3NF)**  rules of 1NF**  rules of 2NF**  rules of 3NF*  know the process to normalise data to 3NFNormalisation - Skills*  apply the process to normalise data to 3NF using relational notationDatabase creation and manipulation - Knowledge*  know techniques to retrieve required information through querying data sets, including:**  searching, sorting and filtering to identify relationships and patterns**  cleaning and manipulating data sets to import required data into a databaseDatabase creation and manipulation - Skills*  use a relational database management system (RDBMS) to create and manipulate a relational databasewith a minimum of five tables.*  use SQL to create, modify and manipulate a database including:**  CREATE and MODIFY tables, including:***  use of constraints to ensure validity of data***  enforcing referential integrity**  DROP**  SELECT**  INSERT**  UPDATE**  DELETE, including cascading deletes**  aggregate functions (COUNT, SUM, AVG, MAX, MIN)**  ORDER BY**  inner join across multiple tables (up to 4 tables)**  GROUP BY (with aggregate functions)**  calculated fields**  concatenated fields**  use of aliases with calculated and concatenated fields*  apply techniques to retrieve required information through querying data sets, including:**  searching, sorting and filtering to identify relationships and patterns**  cleaning and manipulating data sets to import required data into a databaseDevelopment issues - Knowledge*  ethical issues**  collecting data about individuals**  privacy concerns**  appropriate use of data**  reliability of data sources**  acknowledgement of data sources**  use of data mining*  security issues**  keeping personal data private**  backups of organisational data**  restricting access to data**  ownership and control of data*  legal issues**  Australian privacy law in relation to database development**  Australian Privacy Principles (APP5, APP8, APP10, APP11, APP12)